" NeoVundle関連の設定
filetype off

if has('vim_starting')
  set rtp+=~/.vim/bundle/neobundle.vim/
  call neobundle#rc()
endif

"
" github にあるプラグイン
"
NeoBundle 'Shougo/clang_complete.git'
NeoBundle 'Shougo/echodoc.git'
NeoBundle 'Shougo/neocomplcache.git'
NeoBundle 'Shougo/neobundle.vim.git'
NeoBundle 'Shougo/unite.vim.git'
NeoBundle 'Shougo/vim-vcs.git'
NeoBundle 'Shougo/vimfiler.git'
NeoBundle 'Shougo/vimshell.git'
NeoBundle 'Shougo/vinarise.git'
" NeoBundle 'Shougo/vimfiler'
NeoBundle 'Shougo/vimproc'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'thinca/vim-guicolorscheme'
NeoBundle 'ujihisa/vimshell-ssh.git'
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'danchoi/ri.vim.git'
NeoBundle 'motemen/git-vim'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-bundler.git'
NeoBundle 'tpope/vim-rake.git'
NeoBundle 'tpope/vim-abolish.git'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'Lokaltog/vim-powerline'
NeoBundle 'tpope/vim-haml.git'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'vim-scripts/Source-Explorer-srcexpl.vim'
NeoBundle 'vim-jp/cpp-vim'

"
" www.vim.orgにあるプラグイン
"
NeoBundle 'L9'
NeoBundle 'ZenCoding.vim'
NeoBundle 'guicolorscheme.vim'
NeoBundle 'vimshell-ssh'
NeoBundle 'java.vim'
NeoBundle 'yanktmp.vim'
" NeoBundle 'smartchr'
" NeoBundle 'open-browser.vim'
NeoBundle 'Gist.vim'
NeoBundle 'The-NERD-tree'
NeoBundle 'trinity.vim'
NeoBundle 'taglist.vim'
NeoBundle 'dbext.vim'

" それ以外にある gitリポジトリにあるプラグイン
NeoBundle 'git://git.wincent.com/command-t.git'
NeoBundle 'git://github.com/scrooloose/nerdtree.git'
NeoBundle 'git://github.com/scrooloose/nerdcommenter'
NeoBundle 'git://github.com/msanders/cocoa.vim.git'


filetype plugin on
filetype indent on

" QuickRunのキーマップ
nnoremap <Leader>q  <Nop>
nmap     <silent><Leader>qr :w<CR><Plug>(quickrun):copen<CR>
nnoremap <Leader>qR :QuickRun<Space>
" QuickFixバッファを閉じると同時にエラー表示も消す
autocmd MyAutocmd FileType qf nnoremap <buffer><silent> q :q<CR>:HierClear<CR>

""""" git.vim """""
" git add
let g:proj_run1='!git add %f'
let g:proj_run_fold1='*!git add %f'

" git checkout --
let g:proj_run2='!git checkout -- %f'
let g:proj_run_fold2="*!git checkout --%f"

" git status
let g:proj_run3='!git status'

" フォールディングを展開した状態で, プロジェクトを開く
autocmd MyAutocmd BufAdd .vimprojects silent! %foldopen!

" カレントディレクトリにプロジェクト管理ファイルがあったら読み込む
if getcwd() != $HOME
    if filereadable(getcwd(). '/.vimprojects')
        Project .vimprojects
    endif
endif

""""" vim-ruby """""
" <C-Space>でomni補完
imap <C-Space> <C-x><C-o>

""""" rails.vim """""
" Rubyのオムニ補完を設定(ft-ruby-omni)
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

autocmd User Rails.controller* Rnavcommand api app/controllers/api -glob=**/* -suffix=_controller.rb
autocmd User Rails.controller* Rnavcommand tmpl app/controllers/tmpl -glob=**/* -suffix=_controller.rb
autocmd User Rails Rnavcommand config config   -glob=*.*  -suffix= -default=routes.rb
autocmd User Rails nnoremap :<C-u>Rcontroller :<C-u>Rc
autocmd User Rails nnoremap :<C-u>Rmodel :<C-u>Rm
autocmd User Rails nnoremap :<C-u>Rview :<C-u>Rv


""""" neocomplcache """""
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_auto_completion_start_length = 3

""""" yanktmp.vim """""
" map <silent> sy :call YanktmpYank()<CR>
" map <silent> sp :call YanktmpPaste_p()<CR>
" map <silent> sP :call YanktmpPaste_P()<CR>
" if has("win32")
"     let g:yanktmp_file = $TEMP. '/vimyanktmp'
" endif

"""""" smartchr """""
" inoremap <expr> = smartchr#loop(' = ', '=', ' == ')
" inoremap <expr> , smartchr#one_of(', ', ',')
"cnoremap <expr> / smartchr#loop('/', '~/', '//', {'ctype': ':'})

" --------------------------------
" unite.vim
" --------------------------------
nnoremap  [unite] <Nop>
nmap      f       [unite]

nnoremap [unite]u  :<C-u>Unite -no-split<Space>

" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>

" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>

" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>

" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite -no-split buffer file_mru<CR>

" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split file<CR>

" Start insert.
let g:unite_enable_start_insert = 1

autocmd MyAutocmd FileType unite call s:unite_my_settings()

function! s:unite_my_settings()"{{{
  " Overwrite settings.

  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj  <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}

let g:unite_source_file_mru_limit = 200
imap <C-w> <Plug>(neocomplcache_start_unite_complete)

" --------------------------------
" vimfiler
" --------------------------------
" VimFiler をデフォルトのファイルマネージャに設定
g:vimfiler_as_default_explorer = 1

" --------------------------------
" vimshell
" --------------------------------
let g:vimshell_user_prompt  =  'getcwd()'
let g:vimshell_disable_escape_highlight = 1

" --------------------------------
" The NERD tree
" --------------------------------
nnoremap <Leader>n :<C-u>NERDTreeToggle<CR>

""""" gist-vim """""
let g:github_user = 'y-uuki'
let g:github_token = '751922e6e040fa98becd99131604b3d9'

" --------------------------------
" srcexpl
" --------------------------------
" Previewを自動表示する
let g:SrcExpl_RefreshTime = 1

" tagsを自動生成
let g:SrcExpl_UpdateTags = 1
