[user]
  name = yuuki
  email = yuki.tsubo@gmail.com
[color]
  status = auto
  ui = auto
  branch = auto
  interactive = auto
  grep = auto
[push]
  default = simple
[include]
  path = ~/.gitconfig.local
  path = ~/.gitconfig.platform
[core]
  editor = /usr/bin/vim
	excludesfile = ~/.gitignore
	autocrlf = false
  quotepath = false
[grep]
  lineNumber = true
[alias]
	ls = ls-files
  st = status
  sh = show
  so = remote show origin
  sb = show-branch -a
  st = !git status -s && git stash list | cat
  cfm = !git sb && git br && git st
  ft = fetch
  up = pull --rebase # pull rebase
  rbm = rebase master
  ad = add
  co = checkout
  # commit関連
  ci = commit
  cim = commit -m
  cia = commit -a
  cm = commit -v
  # branch関連
  br = branch
  brr = branch -r
  ba = branch -a           # originも含めた全てのbranchを表示
  bm = branch --merged     # merge済みのbranchを表示
  bn = branch --no-merged  # mergeしてないbranchを表示
  # log関連
  lp = log -p
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr = log origin          # originのlog
  lg = log --oneline --decorate --graph # branchとtagをgraph表示
  ld = log -p --graph --decorate
  # diff関連
  dm = diff master         # masterとのdiff
  dc = diff --cached -M    # ファイル名変更時に無駄な差分を出力しない
  ds = diff --staged -M    # 同上(1.6.1移行)
  d1 = diff HEAD~          # HEADから1つ前とdiff
  d2 = diff HEAD~~         # HEADから2つ前とdiff
  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  # grep関連
  gr = grep
  gn = grep -n
  sed = ! git grep -z --full-name -l '.' | xargs -0 perl -pi -e
  grb = grep -n --heading --break
  # stash関連
  ss = stash
  ssl = stash list
  sss = stash save
  ssp = stash pop
  # push/pull関連
  ps = push
  psoh = push origin HEAD
  psb = "!f() { git rev-parse --abbrev-ref HEAD ; }; git push origin `f`"
  pl = pull
  prb = "!f() { git rev-parse --abbrev-ref HEAD ; }; git pull --rebase origin `f`"
  # submodule関連
  sm = submodule
  sma = submodule add
  smu = submodule update
  sgrep =  "!f() { git --no-pager grep \"$1\"; git submodule foreach \"git --no-pager grep '$1'; true\" | grep -B 1 \"$1\"; }; f"
  # colorized cheery -v
  # ls
  ls = ls-files
  lst = ls-tree
  cch= "!f() { git cherry -v "$@" | awk '{ if($1 == \"+\"){ color = \"green\" } if($1 == \"-\"){ color = \"red\" } cmd = \"git show --date=short --no-notes --pretty=format:\\047%C\" color $1 \" %h %Cgreen%cd %Cblue%cn%x09%Creset%s\\047 --summary \" $2; cmd | getline t; close(cmd); print t }' ;}; f"
  rm-cached-all="!f() {for i in `git status | grep deleted | awk '{print $3}'`; do git rm $i; done}"
  fetch-pullreq = fetch origin '+refs/pull/*/head:refs/pull/*'
  plog = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  delete-merged-branches = "!f () { git checkout $1; git branch --merged|egrep -v '\\*|develop|main'|xargs git branch -d; };f"
  vacuum-branches = "!f () { git checkout $1; git branch --merged|egrep -v '\\*|develop|main'|xargs git branch -d; git fetch --prune; };f"
  re = browse-remote
	tree = log --graph --all --format=\"%x09%C(cyan bold)%an%Creset%x09%C(yellow)%h%Creset %C(magenta reverse)%d%Creset %s\"
  fco = !fish -c "fzf-checkout-branch"
[hub]
  protocol = git
[branch]
	autosetuprebase = always
[merge]
	ff = false
[url "git@github.com:"]
  insteadof = "ssh://git@github.com/"
  pushinsteadof = "https://github.com/"
  pushinsteadof = "git://github.com/"
[branch "master"]
	rebase = true
[branch "main"]
	rebase = true
[pager]
  log = diff-highlight | less
  show = diff-highlight | less
  diff = diff-highlight | less
[ghq]
  root = ~/src
[browse-remote "github.com"]
	top = https://{host}/{path}
	ref = https://{host}/{path}/tree/{short_ref}
	rev = https://{host}/{path}/commit/{commit}
	pr = https://{host}/{path}/pull/{short_ref}
	file = "https://{host}/{path}/{file.directory? and :tree or :blob}/{short_rev}/{file}{lines && \"#L%s\" % lines.join(\"-\")}"
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[init]
	defaultBranch = main
[credential "https://github.com"]
	helper = !/usr/bin/gh auth git-credential
