# vim:set ft=zsh foldmethod=marker:
umask 022
limit coredumpsize 0

### Load modules {{{
autoload -Uz compinit; compinit -C
autoload -Uz history-search-end
autoload -Uz vcs_info
autoload -Uz term_info
autoload -Uz zmv
autoload -Uz zcalc
autoload -Uz smart-insert-last-word
autoload -Uz add-zsh-hook
autoload -Uz chpwd_recent_dirs
autoload -Uz cdr
# autoload -Uz promptinit && promptinit
### }}}

### Set options {{{
# Completion
setopt list_packed           # 補完候補を詰めて表示
setopt auto_menu             # タブキー連打で補完候補を順に表示
setopt correct               # スペルチェック
setopt noautoremoveslash     # パスの最後に付くスラッシュを自動的に削除しない
setopt magic_equal_subst     # = 以降でも補完できるようにする( --prefix=/usr 等の場合)
setopt print_eight_bit       # 補完候補リストの日本語を正しく表示
setopt list_types            # 補完候補一覧でファイルの種別を識別マーク表示(ls -F の記号)
setopt auto_cd               # ディレクトリ名だけでcdする。
setopt auto_param_keys       # 対応する括弧などを自動で補完
setopt cdable_vars           # cdの引数がディレクトリでなく，且つスラッシュで始まるものでもなければ，先頭に'~'を付けて展開
setopt complete_in_word      # カーソル位置で補完
setopt glob_complete         # glob を展開しない
setopt hist_expand           # ヒストリを展開
setopt numeric_glob_sort     # 数字としてソート

# History
setopt extended_history      # 実行時間と時刻保存
setopt hist_ignore_all_dups  # 重複するコマンド行は古い方を削除
setopt hist_ignore_dups      # 直前と同じコマンドラインはヒストリに追加しない
setopt share_history         # プロセス間でヒストリを共有する
setopt append_history        # 履歴を追加 (毎回 .zsh_history を作るのではなく)
setopt inc_append_history    # 履歴をインクリメンタルに追加
setopt hist_no_store         # historyコマンドは履歴に登録しない
setopt hist_reduce_blanks    # 余分な空白は詰めて記録
setopt hist_ignore_space     # 先頭がスペースの場合、ヒストリに追加しない#
setopt no_flow_control       # C-s を殺すな

# Direcotory
setopt auto_pushd            # 移動元のディレクトリを自動的にディレクトリスタックに記憶
setopt pushd_ignore_dups     # ディレクトリスタックに重複する物は古い方を削除

# Others
setopt no_beep               # ビープ音を消す
setopt interactive_comments  # コマンドラインで # 以降をコメントとする
setopt numeric_glob_sort     # 辞書順ではなく数値順でソート
setopt no_multios            # zshのリダイレクト機能を制限する
setopt ignore_eof            # Ctrl-dでログアウトしない
setopt no_hup                # ログアウト時にバックグラウンドジョブをkillしない
setopt no_checkjobs          # ログアウト時にバックグラウンドジョブを確認しない
setopt notify                # バックグラウンドジョブが終了したら(プロンプトの表示を待たずに)すぐに知らせる
setopt rm_star_wait          # rm * を実行する前に確認
setopt chase_links           # シンボリックリンクはリンク先のパスに変換してから実行
setopt print_exit_value      # 戻り値が 0 以外の場合終了コードを表示
# setopt single_line_zle       # デフォルトの複数行コマンドライン編集ではなく，１行編集モードになる
setopt auto_list             # lsのリスト表示
setopt auto_menu             # lsのメニュー化
unsetopt promptcr            # 改行コードで終らない出力もちゃんと出力する
unsetopt no_clobber          # リダイレクトで上書きを許可

### }}}

### Keybind {{{
bindkey -e  # Emacs like keybind

bindkey "^[u" undo
bindkey "^[r" redo
bindkey '^J'  self-insert-unmeta

zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey '^P' history-beginning-search-backward-end
bindkey '^N' history-beginning-search-forward-end
bindkey '^R' history-incremental-search-backward
bindkey "^S" history-incremental-pattern-search-forward
bindkey -a 'O' push-line
bindkey -a 'H' run-help

## Ctrl + ] で前回のコマンドの最後の単語を挿入
zle -N insert-last-word smart-insert-last-word
zstyle :insert-last-word match \
    '*([^[:space:]][[:alpha:]/\\]|[[:alpha:]/\\][^[:space:]])*'
bindkey '^]' insert-last-word

### }}}

### Completion {{{
# 補完に使うソース
zstyle ':completion:*' completer _complete _expand _list _match _prefix _approximate

# Enable cache
zstyle ':completion::complete:*' use_cache 1

# スマートケースで補完
zstyle ':completion:*' matcher-list ' 'm:{a-z}={A-Z}' 'm:{A-Z}={a-z}''

# ls
zstyle ':completion:*:default' list-colors "${(s.:.)LS_COLORS}"

# cd
zstyle ':completion:*:cd:*' tag-order local-directories path-directories

# kill
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([%0-9]#)*=0=01;31'

# Select like Emacs
zstyle ':completion:*:default' menu select=1

# sudo を含めても保管できるようにする
zstyle ':completion:*:sudo:*' command-path $sudo_path $path

# Verbose
zstyle ':completion:*' verbose yes

# hub補完
[[ -f $HOME/.bash_completion/hub.bash_completion.sh ]] && . $HOME/.bash_completion/hub.bash_completion.sh
# tig補完
[[ -f $HOME/.bash_completion/tig-completion.bash ]] && . $HOME/.bash_completion/tig-completion.bash

### }}}

### {{{ cdr
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 5000
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both
### }}}

### History {{{
HISTFILE=$HOME/.zsh_history
HISTSIZE=10000000
SAVEHIST=$HISTSIZE
### }}}

### Prompt {{{
ZSH_THEME_GIT_PROMPT_CHANGED="%{$fg[yellow]%}%{✚%G%}" # default blue but hard to see

PROMPT="%{$fg_bold[NCOLOR]%}%{$fg_bold[green]%}%p %{$fg[cyan]%}%c "
GIT_PROMPT='%b$(git_super_status) %'
PROMPT="${PROMPT}${GIT_PROMPT} %{$reset_color%}"
### }}}

### Aliases {{{
alias q='exit'
alias s='ssh'
alias ts='tssh'

## Docker
alias d='docker'
alias dm='docker-machine'
alias dc='docker-compose'
alias k='kubectl'
alias gcs='gcloud compute ssh'

## Git
alias g='git'
alias gst='git status'
alias gl='git log -p'
alias gg='git grep -H --break'
alias gbr='git-browse-remote'
alias gv='gh repo view --web'

## Make
alias mb='make build'
alias mt='make test'

## Utils
if ! type gls > /dev/null 2>&1; then
  alias ls='ls --color=auto'
else
  alias ls='gls --color=auto'
fi
alias ll='ls -lh'
alias la='ls -a'
alias lla='ls -alh'
alias cp='cp -p'
alias grep='grep --color=auto'
alias gr=grep
alias pg=pgrep
alias be="bundle exec"
alias cap="/opt/homebrew/bin/cap"
#alias dntpsync="boot2docker ssh sudo ntpclient -s -h pool.ntp.org"
alias r="roles"
## rust
alias cb='cargo build'
alias cr='cargo run'

## VScode
alias c='code'

## Vim
alias v='nvim'
# vimがなくてもvimでviを起動する。
if ! type vim > /dev/null 2>&1; then
    alias vim=vi
fi

## util
alias findbig='find . -type f -exec ls -s {} \; | sort -n -r | head -5'
alias cpurank='ps -eo user,pcpu,pid,cmd | sort -r -k2 | head -6'
alias diskrank='du -ah | sort -r -k1 | head -5'

# global alias
alias -g G="| grep"
alias -g XG='| xargs grep'
alias -g H='| head'
alias -g T='| tail'
alias -g L='| less -R'
alias -g ...='..//..'
alias -g ....='..//..//..'
alias -g .....='..//..//..//..'

# Linux only
if [[ "$(uname 2> /dev/null)" == "Linux" ]]; then
  alias pbcopy='xclip -selection c'
fi
### }}}

### tmux {{{
tmux-new-session() {
  if [[ -n $TMUX ]]; then
    tmux switch-client -t "$(TMUX= tmux -S "${TMUX%,*,*}" new-session -dP "$@")"
  else
    tmux new-session "$@"
  fi
}

tmux_sessions() {
  # Select existing session or create session with fuzzy search tool
  # get the IDs
  if ! ID="$(tmux list-sessions 2>/dev/null)"; then
    # tmux returned error, so try cleaning up /tmp
    /bin/rm -rf /tmp/tmux*
  fi
  create_new_session="Create New Session"
  if [[ -n "$ID" ]]; then
    ID="${create_new_session}:\n$ID"
  else
    ID="${create_new_session}:"
  fi
  ID="$(echo $ID | fzf --query "${LBUFFER}" | cut -d: -f1)"
  if [[ "$ID" = "${create_new_session}" ]]; then
    tmux-new-session
  elif [[ -n "$ID" ]]; then
    if [[ -n $TMUX ]]; then
      tmux switch-client -t "$ID"
    else
      tmux attach-session -t "$ID"
    fi
  else
    :  # Start terminal normally
  fi
}

# Aliases
if [[ -n $TMUX ]]; then
  alias ta='tmux switch-client -t'
else
  alias ta='tmux attach-session -t'
fi

if [[ "$TERM_PROGRAM" = "alacritty" && ! -n $TMUX && $- == *l* ]]; then
  tmux_sessions
fi
### }}}

# Vim側でC-s C-q
stty -ixon -ixoff

### functions {{{

## ディレクトリ移動時に自動でls
function chpwd() { ls -a }

function u()
{
    cd ./$(git rev-parse --show-cdup)
    if [ $# = 1 ]; then
        cd $1
    fi
}
### }}}

source ~/.zshrc.local

# End profiling
# if (which zprof > /dev/null) ;then
#     zprof | cat
# fi
